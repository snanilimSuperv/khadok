Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reducer;

var _reactNavigation = require('react-navigation');

var _AppNavigator = require('../navigators/AppNavigator');

var firstAction = _AppNavigator.AppNavigator.router.getActionForPathAndParams('Login');
var loginNavState = _AppNavigator.AppNavigator.router.getStateForAction(firstAction);
var secondAction = _AppNavigator.AppNavigator.router.getActionForPathAndParams('Main');
var mainNavState = _AppNavigator.AppNavigator.router.getStateForAction(secondAction);
var initialNavState = _AppNavigator.AppNavigator.router.getStateForAction(_reactNavigation.NavigationActions.init(), loginNavState);

function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialNavState;
  var action = arguments[1];

  var nextState = void 0;
  switch (action.type) {
    case 'GROUP_VAR':
      nextState = _AppNavigator.AppNavigator.router.getStateForAction(_reactNavigation.NavigationActions.reset({
        index: 0,
        actions: [_reactNavigation.NavigationActions.navigate({ routeName: 'Group' })]
      }), state);
      break;

    case 'LOGIN_FULFILLED':
      nextState = _AppNavigator.AppNavigator.router.getStateForAction(_reactNavigation.NavigationActions.reset({
        index: 0,
        actions: [_reactNavigation.NavigationActions.navigate({ routeName: 'Main' })]
      }), state);
      break;

    case 'LOGOUT':
      nextState = _AppNavigator.AppNavigator.router.getStateForAction(_reactNavigation.NavigationActions.reset({
        index: 0,
        actions: [_reactNavigation.NavigationActions.navigate({ routeName: 'Login' })]
      }), state);
      break;
    case "RESET_TO_HOME":
      nextState = _AppNavigator.AppNavigator.router.getStateForAction(_reactNavigation.NavigationActions.reset({
        index: 0,
        actions: [_reactNavigation.NavigationActions.navigate({ routeName: 'Home' })]
      }), state);
      return nextState;
      break;

    case "NAVIGATE_TO":
      nextState = _AppNavigator.AppNavigator.router.getStateForAction(_reactNavigation.NavigationActions.navigate({ routeName: action.payload.link }), state);
      return nextState;
      break;

    case "GO_BACK":
      nextState = _AppNavigator.AppNavigator.router.getStateForAction(_reactNavigation.NavigationActions.back(), state);
      break;

    default:
      nextState = _AppNavigator.AppNavigator.router.getStateForAction(action, state);
      break;
  }
  return nextState || state;
}